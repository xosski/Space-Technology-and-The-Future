# Stormbound Echo Mapper (SEM)
# Predictive Python module for seismic and hydro-anomalies: earthquakes, tsunamis, sinkholes

import numpy as np
import pandas as pd
from scipy.signal import find_peaks
import matplotlib.pyplot as plt

class StormboundEchoMapper:
    def __init__(self, seismic_data, pressure_data):
        """
        seismic_data: pd.DataFrame with columns ['timestamp', 'amplitude']
        pressure_data: pd.DataFrame with columns ['timestamp', 'pressure']
        """
        self.seismic = seismic_data
        self.pressure = pressure_data

    def normalize(self, series):
        return (series - series.min()) / (series.max() - series.min())

    def detect_anomalies(self):
        # Normalize data
        self.seismic['normalized'] = self.normalize(self.seismic['amplitude'])
        self.pressure['normalized'] = self.normalize(self.pressure['pressure'])

        # Find peaks and troughs
        peaks_seismic, _ = find_peaks(self.seismic['normalized'], height=0.6)
        troughs_seismic, _ = find_peaks(-self.seismic['normalized'], height=0.6)

        peaks_pressure, _ = find_peaks(self.pressure['normalized'], height=0.6)
        troughs_pressure, _ = find_peaks(-self.pressure['normalized'], height=0.6)

        anomalies = {
            'seismic_peaks': self.seismic.iloc[peaks_seismic],
            'seismic_troughs': self.seismic.iloc[troughs_seismic],
            'pressure_peaks': self.pressure.iloc[peaks_pressure],
            'pressure_troughs': self.pressure.iloc[troughs_pressure]
        }

        return anomalies

    def plot_anomalies(self, anomalies):
        fig, axs = plt.subplots(2, 1, figsize=(12, 8))

        # Seismic plot
        axs[0].plot(self.seismic['timestamp'], self.seismic['normalized'], label='Seismic')
        axs[0].scatter(anomalies['seismic_peaks']['timestamp'], anomalies['seismic_peaks']['normalized'], color='red', label='Peaks')
        axs[0].scatter(anomalies['seismic_troughs']['timestamp'], anomalies['seismic_troughs']['normalized'], color='blue', label='Troughs')
        axs[0].set_title('Seismic Anomalies')
        axs[0].legend()

        # Pressure plot
        axs[1].plot(self.pressure['timestamp'], self.pressure['normalized'], label='Pressure')
        axs[1].scatter(anomalies['pressure_peaks']['timestamp'], anomalies['pressure_peaks']['normalized'], color='red', label='Peaks')
        axs[1].scatter(anomalies['pressure_troughs']['timestamp'], anomalies['pressure_troughs']['normalized'], color='blue', label='Troughs')
        axs[1].set_title('Atmospheric Pressure Anomalies')
        axs[1].legend()

        plt.tight_layout()
        plt.show()

# Example usage:
# seismic_df = pd.read_csv('seismic_data.csv')
# pressure_df = pd.read_csv('pressure_data.csv')
# sem = StormboundEchoMapper(seismic_df, pressure_df)
# anomalies = sem.detect_anomalies()
# sem.plot_anomalies(anomalies)
