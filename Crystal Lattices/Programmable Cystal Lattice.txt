# Proof of Concept: Programmable Barvias Crystal Lattice
# Purpose: Thermal regulation, energy redirection, structural shielding
# Medium: Liquid Crystal → Solid Crystal → Lattice Network
# Domain: Multimodal (defense, space tech, high-energy physics)

import numpy as np
import random
import time

class CrystalNode:
    def __init__(self, id, phase_state="liquid", orientation_vector=None):
        self.id = id
        self.phase_state = phase_state  # 'liquid', 'transition', 'solid'
        self.orientation_vector = orientation_vector or np.random.rand(3)
        self.heat_capacity = self.calculate_heat_capacity()
        self.conductivity_profile = self.calculate_conductivity()
        self.energy_buffer = 0.0

    def calculate_heat_capacity(self):
        return {
            "liquid": 0.8,
            "transition": 0.5,
            "solid": 0.3
        }[self.phase_state]

    def calculate_conductivity(self):
        base = np.linalg.norm(self.orientation_vector)
        modifier = {
            "liquid": 0.4,
            "transition": 0.7,
            "solid": 1.0
        }[self.phase_state]
        return base * modifier

    def receive_energy(self, joules):
        self.energy_buffer += joules
        if self.energy_buffer > 5.0:
            self.phase_transition()
    
    def phase_transition(self):
        if self.phase_state == "liquid":
            self.phase_state = "transition"
        elif self.phase_state == "transition":
            self.phase_state = "solid"
        self.heat_capacity = self.calculate_heat_capacity()
        self.conductivity_profile = self.calculate_conductivity()

    def disperse_energy(self):
        # Simulate routing energy to adjacent structures
        routed = self.energy_buffer * self.conductivity_profile
        self.energy_buffer *= 0.1  # Residual retained
        return routed

class LatticeField:
    def __init__(self, size=10):
        self.nodes = [CrystalNode(i) for i in range(size)]
        self.network_entropy = 0.0

    def pulse_energy(self, joules):
        for node in self.nodes:
            node.receive_energy(joules * random.uniform(0.8, 1.2))

    def update(self):
        total_dispersed = 0
        for node in self.nodes:
            dispersed = node.disperse_energy()
            total_dispersed += dispersed
            print(f"[Node {node.id}] Phase: {node.phase_state}, Dispersed: {dispersed:.2f}")
        self.network_entropy += total_dispersed * 0.001

    def simulate(self, pulses=5):
        for i in range(pulses):
            print(f"\n[Pulse {i+1}]")
            self.pulse_energy(1.5)
            self.update()
            time.sleep(0.5)

# === Launch Simulation ===
lattice = LatticeField(size=7)
lattice.simulate(pulses=8)